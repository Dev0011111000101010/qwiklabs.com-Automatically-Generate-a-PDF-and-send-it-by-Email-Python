#!/usr/bin/env python3

import json
import locale
import sys
# https://ru.stackoverflow.com/questions/418982/%D0%9A%D0%BE%D0%BB%D0%B8%D1%87%D0%B5%D1%81%D1%82%D0%B2%D0%BE-%D0%BF%D0%BE%D0%B2%D1%82%D0%BE%D1%80%D1%8F%D1%8E%D1%89%D0%B8%D1%85%D1%81%D1%8F-%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%D0%BE%D0%B2-%D0%B2-%D1%81%D0%BF%D0%B8%D1%81%D0%BA%D0%B5
from collections import Counter


def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
    # print('---------------')
    # print(" # QA print(data)")
    # print(data)
    # print(filename)
    # print('---------------')
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  for item in data:
    # print('---------------')
    # print(" # QA print(data)")
    # print(item)
    # print('---------------')
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    # print(item_price)
    item_revenue = item["total_sales"] * item_price
    # print(item_revenue)
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
      # print(item)
  # TODO: also handle max sales
  max_sales = {"total_sales": 0}
  for item in data:
    item_sales = item["total_sales"]
    if item_sales > max_sales["total_sales"]:
      item["total_sales"] = item_sales
      max_sales = item
      # print(item)

  # TODO: also handle most popular car_year
  most_popular_car_year = {"car_year": 0, "count_frequency": 0, "total_sales": 0}
  most_popular_car_year_nested_dictionary = most_popular_car_year["car_year"]
  local_count_frequency = {}
  for item in data:

    local_car = item["car"]
    local_car_year = local_car["car_year"]
    local_car_sales = item["total_sales"]
    # unique_year_number = local_count_frequency[local_car_year]
    # starting_value_of_sales = local_count_frequency['title_car_sales']

    # print(local_car_year, local_car_sales)
    # local_count_frequency

    if local_car_year not in local_count_frequency:
      unique_year_numbers_and = local_count_frequency[local_car_year] = 1
      starting_value_of_sales = local_count_frequency['title_car_sales'] = local_car_sales
      # print(local_count_frequency)
    else:
      # date repeat counter "car_year"
      local_count_frequency[local_car_year] += 1
      # total_sales_of_cars_produced_this_year =
      # local_count_frequency['title_car_sales'] += local_car_sales
      print(local_count_frequency)



  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]), ''
    "The {} had the most sales: {}".format(
      format_car(max_sales["car"]), max_sales["total_sales"]
    )
  ]

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  print(summary)
  # TODO: turn this into a PDF report

  # TODO: send the PDF report as an email attachment

# print('---------------')
# print(main(sys.argv))
# print('---------------')

if __name__ == "__main__":
  main(sys.argv)
